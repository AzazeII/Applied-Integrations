# Set version to 2.1
version: 2.1

commands:
    prepare_run_workspace:
        steps:
            - checkout
            - run: ./gradlew setupDecompWorkspace
            - run: touch eula.txt
            - run: echo "eula=true" >> eula.txt

executors:
    main_flow_executor:
        docker:
            - image: circleci/openjdk:8-jdk
        working_directory: ~/repo

        environment:
            # Customize the JVM maximum heap limit
            JVM_OPTS: -Xmx3200m
            TERM: dumb

    run_executor:
        machine: true

        working_directory: ~/repo

        environment:
            # Customize the JVM maximum heap limit
            JVM_OPTS: -Xmx3200m
            TERM: dumb
jobs:
    #--- This function (below) will push all caches to workspace of workflow ---#
    download_dependencies:
        executor: main_flow_executor
        parallelism: 4

        steps:
            - checkout

            # Load caches
            - restore_cache:
                keys:
                    - v1-dependencies-{{ checksum "build.gradle" }}
                    # fallback to using the latest cache if no exact match is found
                    - v1-dependencies-
            # Install
            - run: ./gradlew dependencies # (1) Dependencies
            - run: ./gradlew setupCIWorkspace # (2) CI workspace

            - save_cache:
                paths:
                    - ~/.gradle
                key: v1-dependencies-{{ checksum "build.gradle" }}

            # Pass cache to next jobs
            - persist_to_workspace:
                # Specify gradle core as root
                root: ~/.gradle/
                # Specify everything
                paths:
                    - .
    #--- This function (above) will push all caches to workspace of workflow ---#


    build:
        executor: main_flow_executor
        parallelism: 2

        steps:
            - attach_workspace:
                # Attach gradle from workspace
                at: ~/.gradle/

            - checkout
            - run: ./gradlew build

    test:
        executor: main_flow_executor
        parallelism: 2

        steps:
            - attach_workspace:
                  # Attach gradle from workspace
                  at: ~/.gradle/

            - checkout
            - run: ./gradlew test

    sonar_test:
        executor: main_flow_executor
        parallelism: 4

        steps:
            - attach_workspace:
                  # Attach gradle from workspace
                  at: ~/.gradle/

            - checkout
            - run: ./gradlew sonarqube
                    -Dsonar.host.url=https://sonarcloud.io
                    -Dsonar.organization=${key}
                    -Dsonar.login=${token}
    run_client:
        executor: run_executor
        parallelism: 2

        steps:
            - attach_workspace:
                  # Attach gradle from workspace
                  at: ~/.gradle/

            - prepare_dev_workspace
            - run: ./gradlew runClient

    run_server:
        executor: run_executor
        parallelism: 4

        steps:
            - attach_workspace:
                # Attach gradle from workspace
                at: ~/.gradle/

            # Prepare dev workspace, create eula.txt
            - prepare_dev_workspace

            # Run server via xvfb, to avoid any crash with display
            - run: xvfb-run ./gradlew runServer

workflows:
    version: 2

    #                                                                                            | ----> Backups
    # Main flow sequence: Download_dependencies -> Test -----------|                             | ----> Curseforge
    #                                           -> Build -> Run client/server -> human test -> deploy -> Sonarcloud.io test
    main_flow:
        jobs:
            # Run each job in sequence above
            - download_dependencies # (1) dependencies
            - build: # (2) build code
                requires:
                    - download_dependencies
            - test: # (3) test code
                requires:
                    - download_dependencies
            #- run_client: # (4) run minecraft TODO replace, or fix crash
             #     requires:
              #        - build
               #       - test
            - run_server: # (5) run minecraft server
                  requires:
                      - build
                      - test
            - sonar_test: # (6) run sonar cloud tests for code
                  requires:
                      - run_server

